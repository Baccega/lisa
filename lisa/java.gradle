plugins.withType(JavaPlugin) {
	if (git_ready) {
		jar.doFirst {
			println('Injecting custom information into manifest')
			manifest {
				 attributes(
					'Implementation-Title': rootProject.name,
					'Implementation-Version': project.version,
					'Implementation-Vendor': 'Ca\' Foscari University of Venice',
					'Created-By': "Gradle ${gradle.gradleVersion}",
					'Build-Revision': git_cid,
					'Build-Tag': git_tag,
					'Build-Branch': git_branch,
					'Build-Clean': git_is_clean,
					'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
					'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
					'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
				)
			}
		}
	}
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

ext.moduleName = 'it.unive.lisa'

compileJava {
	// this block could be avoided by adding this to the java block:
	// modularity.inferModulePath = true
	// but unnamed modules are not taken into account for some reason, 
	// so the switch must be manual
    inputs.property('moduleName', moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath
        ]
        classpath = files()
    }
}

javadoc {
	inputs.property('moduleName', moduleName)
	exclude "**/module-info.java"
    options.modulePath(files(classpath.asPath) as List)
    options.addBooleanOption('-no-module-directories', true)
}
